// <auto-generated />
using System;
using EthCrawlerApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EthCrawlerApi.Migrations
{
    [DbContext(typeof(EthCrawlerDbContext))]
    [Migration("20250830222746_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EthCrawlerApi.Domain.EthTransaction", b =>
                {
                    b.Property<string>("Hash")
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.Property<long>("BlockNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("GasPriceGwei")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)");

                    b.Property<decimal>("GasUsed")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)");

                    b.Property<DateTime>("TimeStampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("ValueEth")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)");

                    b.Property<bool>("isError")
                        .HasColumnType("boolean");

                    b.HasKey("Hash");

                    b.HasIndex("BlockNumber");

                    b.HasIndex("From");

                    b.HasIndex("TimeStampUtc");

                    b.HasIndex("To");

                    b.ToTable("EthTransactions", "public");
                });

            modelBuilder.Entity("EthCrawlerApi.Domain.InternalTransaction", b =>
                {
                    b.Property<string>("UniqueId")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<long>("BlockNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("ValueEth")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)");

                    b.HasKey("UniqueId");

                    b.HasIndex("BlockNumber");

                    b.HasIndex("From");

                    b.HasIndex("Hash");

                    b.HasIndex("To");

                    b.ToTable("InternalTransactions", "public");
                });

            modelBuilder.Entity("EthCrawlerApi.Domain.TokenTransfer", b =>
                {
                    b.Property<string>("UniqueId")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(38, 18)
                        .HasColumnType("numeric(38,18)");

                    b.Property<long>("BlockNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("ContractAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("TokenDecimals")
                        .HasColumnType("integer");

                    b.Property<string>("TokenSymbol")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("TxHash")
                        .IsRequired()
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.HasKey("UniqueId");

                    b.HasIndex("BlockNumber");

                    b.HasIndex("ContractAddress");

                    b.HasIndex("From");

                    b.HasIndex("To");

                    b.HasIndex("TxHash");

                    b.HasIndex("ContractAddress", "TokenSymbol");

                    b.ToTable("TokenTransfers", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
